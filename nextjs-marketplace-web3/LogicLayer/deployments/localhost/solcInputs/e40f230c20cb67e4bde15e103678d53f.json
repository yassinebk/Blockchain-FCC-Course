{
  "language": "Solidity",
  "sources": {
    "contracts/NFTMarketplace.sol": {
      "content": "// SPDX-License-Identifier: mMIT\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\nerror NFTMarketplace__PriceMustBePositive();\nerror NFTMarketplace__AlreadyListed(address, uint256);\nerror NFTMarketplace__NotApproved();\nerror NFTMarketplace__NotOwner();\nerror NFTMarketplace__PriceNotMet(address,uint256,uint256);\nerror NFTMarketplace__NotListed(address, uint256);\nerror NFTMarketplace__NoProceeds();\nerror NFTMarketplace__TransferFailed();\nerror NFTMarketplace__NotAllowed();\n\ncontract NFTMarketplace { \n\n    struct Listing { \n        uint256 price;\n        address seller;\n    }\n    // NFT Contract Address -> NFT TokenID -> Listing\n\n    mapping(address =>mapping(uint256 => Listing))  private s_listings;\n    mapping(address=>uint256) private s_proceeds;\n\n    address immutable i_owner;\n\n    event ItemListed(\n        address indexed sender,\n        address indexed nftAddress,\n        uint256 indexed tokenId,\n        uint256 price\n        // This Contract can accept payment in different coins/tokens\n    );\n\n    event ItemBought(\n        address indexed buyer,\n        address indexed NFTAddress,\n        uint256 indexed tokenId,\n        uint256 price\n    );\n\n    event ItemCanceled(\n        address indexed seller,\n        address indexed NFTAddress,\n        uint256 indexed tokenId\n        );\n\n    event ItemUpdated(\n        address indexed seller,\n        address indexed NFTAddress,\n        uint256 indexed tokenId,\n        uint256  newPrice\n        );\n\n\n\nmodifier notListed(address NFTAddress,uint256 tokenId,address owner){\n    Listing memory listing = s_listings[NFTAddress][tokenId];\n    if(listing.price>0){\n        revert NFTMarketplace__AlreadyListed(NFTAddress,tokenId);\n    }\n    _;\n}\n\nmodifier isAdmin(address caller){\n    if(caller!=i_owner) revert NFTMarketplace__NotAllowed();\n    _;\n}\n\nmodifier isOwner(address NFTAddress, uint256 tokenId , address owner){ \n    IERC721 NFTContract =  IERC721(NFTAddress);\n    address realOwner = NFTContract.ownerOf(tokenId);\n    if(owner!=realOwner)\n        revert NFTMarketplace__NotOwner();\n    _;\n} \n\nmodifier isListed(address NFTAddress, uint256 tokenId){\n    Listing memory listing = s_listings[NFTAddress][tokenId];\n    if(listing.price<=0){\n        revert NFTMarketplace__NotListed(NFTAddress,tokenId);\n    }\n    _;\n}\n\nconstructor(){\n    i_owner=msg.sender;\n}\n\n/*\n* @notice Method for lising your NFT on the marketplace\n* @param NFTAddress Address of the NFT contract\n* @param tokenId NFT Token ID (Unique per contract)\n* @param price Price of the listing\n\n* @dev we should make the owner pass the ownership of the NFT to the marketplace when listed.\n*/\n\nfunction listItem(address NFTAddress,uint256 tokenId,uint256 price) external\n    notListed(NFTAddress,tokenId,msg.sender)\n    isOwner(NFTAddress,tokenId,msg.sender)\n {\n    if(price<=0 ){\n        revert NFTMarketplace__PriceMustBePositive();\n    }\n\n    IERC721 nft= IERC721(NFTAddress);\n    if(nft.getApproved(tokenId)!=address(this)){\n        revert NFTMarketplace__NotApproved();\n    }\n\n    s_listings[NFTAddress][tokenId]=Listing(price,msg.sender);\n\n    emit ItemListed(msg.sender,NFTAddress,tokenId,price);\n    // 1. Send the NFT to the contract. Transfer -> Contract\n    // 2. Owners can still hold their NFT and give the marketplace approval\n    // to sell NFT for them\n } \n\n function buyItem(address NFTAddress,uint256 tokenId) external payable \n isListed(NFTAddress,tokenId)\n {\n    Listing memory listedItem = s_listings[NFTAddress][tokenId];\n\n    if(msg.value<listedItem.price){\n        revert NFTMarketplace__PriceNotMet(NFTAddress,tokenId,listedItem.price);\n    }\n\n    s_proceeds[listedItem.seller]+=listedItem.price;\n    delete(s_listings[NFTAddress][tokenId]);   // Remove the listing from the marketplace \n    IERC721 nft= IERC721(NFTAddress);\n    nft.safeTransferFrom(listedItem.seller,msg.sender,tokenId);\n\n    emit ItemBought(msg.sender,NFTAddress,tokenId,listedItem.price);\n }\n\n function cancelListing(address NFTAddress,uint256 tokenId) external\n isOwner(NFTAddress,tokenId,msg.sender)\n {\n    if(s_listings[NFTAddress][tokenId].price==0){\n        revert NFTMarketplace__NotListed(NFTAddress,tokenId);\n    }\n    delete (s_listings[NFTAddress][tokenId]);\n    emit ItemCanceled(msg.sender,NFTAddress,tokenId);\n }\n\n function updateListing(address NFTAddress, uint256 tokenId,uint256 newPrice)\n    external \n    isListed(NFTAddress,tokenId)\n    isOwner(NFTAddress,tokenId,msg.sender)\n {\n    s_listings[NFTAddress][tokenId].price=newPrice;\n\n    emit ItemUpdated(msg.sender,NFTAddress,tokenId,newPrice);\n\n } \n  function withdrawProceeds() external {\n        uint256 proceeds = s_proceeds[msg.sender];\n        if (proceeds <= 0) {\n            revert NFTMarketplace__NoProceeds();\n        }\n        s_proceeds[msg.sender] = 0;\n        (bool success, ) = payable(msg.sender).call{value: proceeds}(\"\");\n        require(success, \"Transfer failed\");\n    }\n\n\n function getListing(address NFTAddress,uint256 tokenId) public view returns (Listing memory listing){\n    return s_listings[NFTAddress][tokenId];\n }\n\n function getProcceeds()public view returns(uint256){\n    return s_proceeds[msg.sender];\n }\n\n function getAnyProcceeds(address seller) public view \n isAdmin(msg.sender)\nreturns(uint256)\n {\n    return s_proceeds[seller];\n }\n \n\n\n}"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}