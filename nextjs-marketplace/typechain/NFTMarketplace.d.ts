/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface NFTMarketplaceInterface extends ethers.utils.Interface {
  functions: {
    "buyItem(address,uint256)": FunctionFragment;
    "cancelListing(address,uint256)": FunctionFragment;
    "getAnyProcceeds(address)": FunctionFragment;
    "getListing(address,uint256)": FunctionFragment;
    "getProcceeds()": FunctionFragment;
    "listItem(address,uint256,uint256)": FunctionFragment;
    "updateListing(address,uint256,uint256)": FunctionFragment;
    "withdrawProceed()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buyItem",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelListing",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAnyProcceeds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getListing",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProcceeds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listItem",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateListing",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawProceed",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "buyItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAnyProcceeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getListing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProcceeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawProceed",
    data: BytesLike
  ): Result;

  events: {
    "ItemBought(address,address,uint256,uint256)": EventFragment;
    "ItemCanceled(address,address,uint256)": EventFragment;
    "ItemList(address,address,uint256,uint256)": EventFragment;
    "ItemUpdated(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ItemBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemUpdated"): EventFragment;
}

export type ItemBoughtEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    buyer: string;
    NFTAddress: string;
    tokenId: BigNumber;
    price: BigNumber;
  }
>;

export type ItemCanceledEvent = TypedEvent<
  [string, string, BigNumber] & {
    seller: string;
    NFTAddress: string;
    tokenId: BigNumber;
  }
>;

export type ItemListEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    sender: string;
    nftAddress: string;
    tokenId: BigNumber;
    price: BigNumber;
  }
>;

export type ItemUpdatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    seller: string;
    NFTAddress: string;
    tokenId: BigNumber;
    newPrice: BigNumber;
  }
>;

export class NFTMarketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NFTMarketplaceInterface;

  functions: {
    buyItem(
      NFTAddress: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelListing(
      NFTAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAnyProcceeds(
      seller: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getListing(
      NFTAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, string] & { price: BigNumber; seller: string }] & {
        listing: [BigNumber, string] & { price: BigNumber; seller: string };
      }
    >;

    getProcceeds(overrides?: CallOverrides): Promise<[BigNumber]>;

    listItem(
      NFTAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateListing(
      NFTAddress: string,
      tokenId: BigNumberish,
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawProceed(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  buyItem(
    NFTAddress: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelListing(
    NFTAddress: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAnyProcceeds(
    seller: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getListing(
    NFTAddress: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { price: BigNumber; seller: string }>;

  getProcceeds(overrides?: CallOverrides): Promise<BigNumber>;

  listItem(
    NFTAddress: string,
    tokenId: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateListing(
    NFTAddress: string,
    tokenId: BigNumberish,
    newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawProceed(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyItem(
      NFTAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelListing(
      NFTAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAnyProcceeds(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getListing(
      NFTAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { price: BigNumber; seller: string }>;

    getProcceeds(overrides?: CallOverrides): Promise<BigNumber>;

    listItem(
      NFTAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateListing(
      NFTAddress: string,
      tokenId: BigNumberish,
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawProceed(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ItemBought(address,address,uint256,uint256)"(
      buyer?: string | null,
      NFTAddress?: string | null,
      tokenId?: BigNumberish | null,
      price?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        buyer: string;
        NFTAddress: string;
        tokenId: BigNumber;
        price: BigNumber;
      }
    >;

    ItemBought(
      buyer?: string | null,
      NFTAddress?: string | null,
      tokenId?: BigNumberish | null,
      price?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        buyer: string;
        NFTAddress: string;
        tokenId: BigNumber;
        price: BigNumber;
      }
    >;

    "ItemCanceled(address,address,uint256)"(
      seller?: string | null,
      NFTAddress?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; NFTAddress: string; tokenId: BigNumber }
    >;

    ItemCanceled(
      seller?: string | null,
      NFTAddress?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; NFTAddress: string; tokenId: BigNumber }
    >;

    "ItemList(address,address,uint256,uint256)"(
      sender?: string | null,
      nftAddress?: string | null,
      tokenId?: BigNumberish | null,
      price?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        sender: string;
        nftAddress: string;
        tokenId: BigNumber;
        price: BigNumber;
      }
    >;

    ItemList(
      sender?: string | null,
      nftAddress?: string | null,
      tokenId?: BigNumberish | null,
      price?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        sender: string;
        nftAddress: string;
        tokenId: BigNumber;
        price: BigNumber;
      }
    >;

    "ItemUpdated(address,address,uint256,uint256)"(
      seller?: string | null,
      NFTAddress?: string | null,
      tokenId?: BigNumberish | null,
      newPrice?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        seller: string;
        NFTAddress: string;
        tokenId: BigNumber;
        newPrice: BigNumber;
      }
    >;

    ItemUpdated(
      seller?: string | null,
      NFTAddress?: string | null,
      tokenId?: BigNumberish | null,
      newPrice?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        seller: string;
        NFTAddress: string;
        tokenId: BigNumber;
        newPrice: BigNumber;
      }
    >;
  };

  estimateGas: {
    buyItem(
      NFTAddress: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelListing(
      NFTAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAnyProcceeds(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getListing(
      NFTAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProcceeds(overrides?: CallOverrides): Promise<BigNumber>;

    listItem(
      NFTAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateListing(
      NFTAddress: string,
      tokenId: BigNumberish,
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawProceed(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyItem(
      NFTAddress: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelListing(
      NFTAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAnyProcceeds(
      seller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getListing(
      NFTAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProcceeds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listItem(
      NFTAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateListing(
      NFTAddress: string,
      tokenId: BigNumberish,
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawProceed(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
